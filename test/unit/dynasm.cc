/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.3.0, DynASM x64 version 1.3.0
** DO NOT EDIT! The original file is in "test/unit/dynasm_asm.cc".
*/

#line 1 "test/unit/dynasm_asm.cc"
#include "unit.h"
#include "dynasm/dynasm.h"
#include <stdio.h>

// DynASM directives.
//|.arch x64
#if DASM_VERSION != 10300
#error "Version mismatch between DynASM and included encoding engine"
#endif
#line 7 "test/unit/dynasm_asm.cc"
//|.actionlist actions
static const unsigned char actions[4] = {
  184,237,195,255
};

#line 8 "test/unit/dynasm_asm.cc"
#define Dst &state

void
test_int_f(void)
{
	header();
	dasm_State *state;
	dasm_init(Dst, 1);
	dasm_setup(Dst, actions);
	int num = (int)((char *)test_int_f - (char *)state);

	//|  mov eax, num
	//|  ret
	dasm_put(Dst, 0, num);
#line 21 "test/unit/dynasm_asm.cc"

	int (*f)() = (int (*)())dynasm_assemble(Dst);
	if (f == NULL) {
		printf("Error: f is NULL\n");
		return;
	}
	printf("int f(void); - generated by dynasm\n");
	printf("f() == num: %s\n", f() == num ? "true" : "false");
	dynasm_free((void *)f);

	footer();
}

int
main(void)
{
	test_int_f();
}
